name: ci

on:
  push:
    branches:
    - '*'
    - '*/*'
    - '**'

jobs:
  test:
    name: Compile & Test
    strategy:
      matrix:
        go-version: [1.18]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    env:
      NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}

    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Snyk Setup
      uses: snyk/actions/setup@master

    - name: Run Snyk to check for vulnerabilities
      run: snyk test --project-name=stream-replicator --severity-threshold=high
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Cache go modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Block Concurrent Executions of Integration Tests
      if: ${{ env.NGROK_TOKEN != '' }} 
      uses: softprops/turnstyle@v1
      with:
        poll-interval-seconds: 10
        same-branch-only: false
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Install ngrok
      run: |
          mkdir -p $GITHUB_WORKSPACE/bin
          wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip && unzip ngrok-stable-linux-amd64.zip -d $GITHUB_WORKSPACE/bin/
          $GITHUB_WORKSPACE/bin/ngrok authtoken ${{ secrets.NGROK_TOKEN }}

    - name: Setup integration resources
      run: export NGROK_DIR=$GITHUB_WORKSPACE/bin/ && make integration-up

    - name: Run integration & unit tests
      run: make integration-test

    - name: Run linter
      run: make lint

    - name: Compile all targets
      run: make all