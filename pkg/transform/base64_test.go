/**
 * Copyright (c) 2020-present Snowplow Analytics Ltd.
 * All rights reserved.
 *
 * This software is made available by Snowplow Analytics, Ltd.,
 * under the terms of the Snowplow Limited Use License Agreement, Version 1.1
 * located at https://docs.snowplow.io/limited-use-license-1.1
 * BY INSTALLING, DOWNLOADING, ACCESSING, USING OR DISTRIBUTING ANY PORTION
 * OF THE SOFTWARE, YOU AGREE TO THE TERMS OF SUCH LICENSE AGREEMENT.
 */

package transform

import (
	"encoding/base64"
	"testing"

	"github.com/snowplow/snowbridge/v3/pkg/models"
	"github.com/stretchr/testify/assert"
)

func TestBase64DecodeSuccess(t *testing.T) {
	assert := assert.New(t)

	testCase := models.Message{
		Data: []byte("SGVsbG8gV29ybGQh"),
	}

	success, _, failure, _ := Base64Decode(&testCase, nil)

	assert.Equal("Hello World!", string(success.Data))
	assert.Nil(failure)

	assert.Nil(nil)
}

func TestBase64DecodeFailure(t *testing.T) {
	assert := assert.New(t)

	testCase := models.Message{
		Data: []byte("notB64"),
	}

	success, _, failure, _ := Base64Decode(&testCase, nil)

	assert.Nil(success)
	assert.NotNil(failure)
	assert.NotNil(failure.GetError())

	assert.Nil(nil)
}

// TestBase64DecodeTrailingNulls reproduces an issue we found whereby trailing nulls were sometimes added to the end of the decoded data
func TestBase64DecodeTrailingNulls(t *testing.T) {
	assert := assert.New(t)

	// One example of an exact value that produces the issue
	// Simpler values can also produce but this one provides the most problematic case
	encodedValue := []byte("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")

	testCase := models.Message{

		// The exact value that produced the issue
		Data: encodedValue,
	}

	success, _, _, _ := Base64Decode(&testCase, nil)

	// To reproduce, we re-encode it. The buggy implementation provided a different value.
	encodedAgain := base64.StdEncoding.EncodeToString(success.Data)

	assert.Equal(encodedValue, []byte(encodedAgain))
}

func TestBase64EncodeSuccess(t *testing.T) {
	assert := assert.New(t)

	testCase := models.Message{
		Data: []byte("Hello World!"),
	}

	success, _, failure, _ := Base64Encode(&testCase, nil)

	assert.Equal("SGVsbG8gV29ybGQh", string(success.Data))
	assert.Nil(failure)

	assert.Nil(nil)
}
